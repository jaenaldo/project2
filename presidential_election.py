# -*- coding: utf-8 -*-
"""Presidential_Election

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QUE5CB3yJSPQOjUnMt5BsKYhr2DBEZ_0
"""

import numpy as np
!pip install geopandas;
import geopandas as gpd
from shapely.geometry import shape

from bokeh.io import output_file, show,output_notebook
from bokeh.models import ColumnDataSource,ColorBar,HoverTool
from bokeh.transform import linear_cmap
from bokeh.plotting import figure
from bokeh.palettes import Spectral6, Spectral5, Spectral3, Spectral4, Spectral

election = gpd.read_file('US48_county_election_2016.shp')
election.head(n=200000)

county = gpd.read_file('USA_Counties.shp')
county.head(n=10000)

import pandas as pd
data_2000 = pd.read_csv('Final_2000.csv')
data_2000.head(n=7000)

data_2004 = pd.read_csv('Final_2004.csv')
data_2004.head(n=3200)

data_2008 = pd.read_csv('Final_2008.csv')
data_2008

data_2012 = pd.read_csv('Final_2012.csv')
data_2012

data_2016 = pd.read_csv('Final_2016.csv')
data_2016

data_2020 = pd.read_csv('Final_2020.csv')
data_2020

election = election[['geoid_int','geometry']]
election.head(n=3200)

election = election.loc[(election["geoid_int"] !=46102)]

election.head(n=3200)

import matplotlib.pyplot as plt
fig, ax = plt.subplots(figsize=(6,6))
election.plot(ax=ax, **{'edgecolor':'black', 'facecolor':'white'})

election_2000 = data_2000.merge(election, on='geoid_int',how='left')

election_2004 = data_2004.merge(election, on='geoid_int',how='left')

election_2008 = data_2008.merge(election, on='geoid_int',how='left')

election_2012 = data_2012.merge(election, on='geoid_int',how='left')

election_2016 = data_2016.merge(election, on='geoid_int',how='left')

election_2020 = data_2020.merge(election, on='geoid_int', how='left')

election_2020

election_2016

election_2008

election_2004

election_2000

def gpd_bokeh(df):
    """Convert geometries from geopandas to bokeh format"""
    nan = float('nan')
    lons = []
    lats = []
    for i,shape in enumerate(df.geometry.values):
        if shape.geom_type == 'MultiPolygon':
            gx = []
            gy = []
            ng = len(shape.geoms) - 1
            for j,member in enumerate(shape.geoms):
                xy = np.array(list(member.exterior.coords))
                xs = xy[:,0].tolist()
                ys = xy[:,1].tolist()
                gx.extend(xs)
                gy.extend(ys)
                if j < ng:
                    gx.append(nan)
                    gy.append(nan)
            lons.append(gx)
            lats.append(gy)

        else:
            xy = np.array(list(shape.exterior.coords))
            xs = xy[:,0].tolist()
            ys = xy[:,1].tolist()
            lons.append(xs)
            lats.append(ys)

    return lons,lats

lons, lats = gpd_bokeh(election_2008)
source = ColumnDataSource(data=dict(
    	x=lons,
    	y=lats,
        STATE_ABBR = election_2020['STATE_ABBR'],
        COUNTY_NAME = election_2020['COUNTY_NAME'],
        DEMO_PER = election_2020['DEMO_PER'],
        REP_PER = election_2020['REP_PER']))

lons, lats = gpd_bokeh(election_2000)
source = ColumnDataSource(data=dict(
    	x=lons,
    	y=lats,
        STATE_ABBR = election_2016['STATE_ABBR'],
        COUNTY_NAME = election_2016['COUNTY_NAME'],
        DEMO_PER = election_2016['DEMO_PER'],
        REP_PER = election_2016['REP_PER']))

color_mapper = linear_cmap(field_name='DEMO_PER', palette=Spectral6 ,
                           low=min(election_2008['DEMO_PER']) ,
                           high=max(election_2008['DEMO_PER']))
color_mapper1 = linear_cmap(field_name='REP_PER', palette=Spectral5,
                            low=min(election_2008['REP_PER']),
                            high=max(election_2008['REP_PER']))
TOOLS = "pan, wheel_zoom, reset, hover, save"

map = figure(min_width=800, height=600,title="2020 County-Level Presidential Election Return in 48 States", tools=TOOLS,)
map.patches('x', 'y', source=source, line_color="black", line_width=0.1, color=color_mapper and color_mapper1)

map.select_one(HoverTool).tooltips = [
    ('STATE_ABBR', '@STATE_ABBR'),
    ('COUNTY_NAME', '@COUNTY_NAME'),
    ('DEMO_PER', '@DEMO_PER'),
    ('REP_PER', '@REP_PER')
]

color_bar = ColorBar(color_mapper=color_mapper['transform'], width=16, location=(0,0))
map.add_layout(color_bar, 'right')

color_mapper2 = linear_cmap(field_name='DEMO_PER', palette=Spectral6 ,
                           low=min(election_2000['DEMO_PER']) ,
                           high=max(election_2000['DEMO_PER']))
color_mapper3 = linear_cmap(field_name='REP_PER', palette=Spectral5,
                            low=min(election_2000['REP_PER']),
                            high=max(election_2000['REP_PER']))
TOOLS = "pan, wheel_zoom, reset, hover, save"



map1 = figure(min_width=800, height=600,title="2000 County-Level Presidential Election Return in 48 States", tools=TOOLS,)
map.patches('x', 'y', source=source, line_color="black", line_width=0.1, color=color_mapper and color_mapper1)

map.select_one(HoverTool).tooltips = [
    ('STATE_ABBR', '@STATE_ABBR'),
    ('COUNTY_NAME', '@COUNTY_NAME'),
    ('DEMO_PER', '@DEMO_PER'),
    ('REP_PER', '@REP_PER')
]

color_bar = ColorBar(color_mapper=color_mapper['transform'], width=16, location=(0,0))
map.add_layout(color_bar, 'right')

output_file("election_2020.html")
show(map and map1)

output_file("election_2000.html")
show(map)